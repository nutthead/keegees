# ============================================================================
# KEEGEES AUTOMATED RELEASE WORKFLOW
# ============================================================================
# This workflow provides comprehensive automated versioning and release
# management for the keegees GNOME keybinding management CLI tool.
#
# FEATURES:
# - Automated semantic version increments (patch-level)
# - Multi-file version synchronization (README.md, keegees.sh)
# - Comprehensive quality assurance via ShellCheck validation
# - Professional release asset generation (tar.gz, zip archives)
# - Dynamic release notes with installation instructions
# - GitHub release creation with automated asset attachment
#
# TRIGGER CONDITIONS:
# - Automatic: Push to master branch (production releases)
# - Manual: workflow_dispatch for ad-hoc releases and testing
#
# PERMISSIONS REQUIRED:
# - contents:write - Repository file modifications and tag creation
# - packages:write - Release asset publishing and management
# ============================================================================

name: üè∑Ô∏è Auto Tag and Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  # ==========================================================================
  # JOB 1: VALIDATION AND VERSION CALCULATION
  # ==========================================================================
  # Performs comprehensive quality assurance and determines the next semantic
  # version number for the keegees release. This job validates shell scripts
  # using ShellCheck and calculates version increments based on existing git
  # tags, ensuring consistent and reliable version management.
  #
  # OUTPUTS:
  # - version: Semantic version number (e.g., "0.0.2")
  # - tag: Git tag format (e.g., "v0.0.2")
  #
  # DEPENDENCIES: None (entry point job)
  # ==========================================================================
  validate-and-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_next_version.outputs.version }}
      tag: ${{ steps.get_next_version.outputs.tag }}
    steps:
      # ----------------------------------------------------------------------
      # STEP: Repository Checkout with Full History
      # Retrieves complete git history for accurate version calculation and
      # tag analysis. Full history is required for git describe operations.
      # ----------------------------------------------------------------------
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------------------
      # STEP: Shell Script Quality Assurance
      # Validates keegees.sh and install.sh using ShellCheck to ensure
      # adherence to best practices and prevent shell scripting errors.
      # ----------------------------------------------------------------------
      - name: üîç Run ShellCheck
        run: |
          shellcheck keegees.sh
          shellcheck install.sh

      # ----------------------------------------------------------------------
      # STEP: Semantic Version Calculation
      # Analyzes existing git tags to determine the next patch version.
      # Implements automated semantic versioning with consistent increment logic.
      # ----------------------------------------------------------------------
      - name: üìä Calculate Next Version
        id: get_next_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          CURRENT_VERSION=${LATEST_TAG#v}
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
          
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "üìä Next version will be: v$NEXT_VERSION"

  # ==========================================================================
  # JOB 2: VERSION SYNCHRONIZATION AND GIT TAGGING
  # ==========================================================================
  # Synchronizes version references across multiple project files and creates
  # annotated git tags for release tracking. Updates README.md version badges,
  # CLI display versions, and keegees.sh VERSION constants to maintain
  # consistency throughout the codebase.
  #
  # FILE UPDATES:
  # - README.md: Version badges and warning text
  # - keegees.sh: Internal VERSION constant
  #
  # GIT OPERATIONS:
  # - Atomic commits with [skip ci] to prevent recursion
  # - Annotated tag creation with automated messages
  # - Remote repository synchronization
  #
  # DEPENDENCIES: validate-and-version (requires version outputs)
  # ==========================================================================
  version-sync-and-tag:
    runs-on: ubuntu-latest
    needs: validate-and-version
    steps:
      # ----------------------------------------------------------------------
      # STEP: Repository Checkout for File Modifications  
      # Retrieves repository contents for version synchronization operations.
      # Full history enables proper git operations for tagging and pushing.
      # ----------------------------------------------------------------------
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------------------
      # STEP: Multi-File Version Synchronization
      # Updates version references across README.md and keegees.sh to maintain
      # consistency. Uses sed for reliable pattern matching and replacement.
      # ----------------------------------------------------------------------
      - name: üîÑ Synchronize Version Across Files
        run: |
          NEW_VERSION="${{ needs.validate-and-version.outputs.version }}"
          echo "üîÑ Updating version to $NEW_VERSION across all files..."
          
          sed -i "s/Version-[0-9.]*/Version-$NEW_VERSION/g" README.md
          
          sed -i "s/version [0-9.]*/version $NEW_VERSION/g" README.md
          
          sed -i "s/Version [0-9.]\+/Version $NEW_VERSION/g" README.md
          
          sed -i "s/readonly VERSION=\"[0-9.]*\"/readonly VERSION=\"$NEW_VERSION\"/g" keegees.sh
          
          echo "üìä Version references updated:"
          echo "  README.md badge: $(grep -o 'Version-[0-9.]*' README.md)"
          echo "  README.md warning: $(grep -o 'version [0-9.]*' README.md)"
          echo "  keegees.sh VERSION: $(grep -o 'readonly VERSION=\"[0-9.]*\"' keegees.sh)"

      # ----------------------------------------------------------------------
      # STEP: Atomic Version Update Commit
      # Creates atomic commit with version changes and [skip ci] tag to
      # prevent recursive workflow triggers. Ensures clean git history.
      # ----------------------------------------------------------------------
      - name: üíæ Commit Version Updates
        run: |
          NEW_VERSION="${{ needs.validate-and-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add README.md keegees.sh
          
          if git diff --cached --quiet; then
            echo "No version updates needed"
          else
            git commit -m "üîÑ Sync version to $NEW_VERSION across all files
            
            - Update README.md version badge and references
            - Update keegees.sh VERSION constant
            - Ensure consistency across codebase
            
            [skip ci]"
          fi

      # ----------------------------------------------------------------------
      # STEP: Git Tag Creation and Remote Push
      # Creates annotated git tag and pushes commits and tags to remote.
      # Implements proper sequencing to avoid race conditions.
      # ----------------------------------------------------------------------
      - name: üè∑Ô∏è Create and Push Tag
        run: |
          TAG="${{ needs.validate-and-version.outputs.tag }}"
          git tag -a "$TAG" -m "ü§ñ Automated version tag: $TAG"
          git push
          git push origin "$TAG"

  # ==========================================================================
  # JOB 3: RELEASE ASSET CREATION
  # ==========================================================================
  # Generates professional release archives and comprehensive release notes
  # for distribution. Creates both tar.gz and zip formats with proper
  # directory structures, excluding development files and maintaining
  # professional packaging standards.
  #
  # ARCHIVE FORMATS:
  # - tar.gz: Unix/Linux preferred format with directory transformation
  # - zip: Windows/cross-platform compatibility format
  #
  # RELEASE NOTES:
  # - Dynamic version warnings based on stability (pre-1.0 vs stable)
  # - Installation instructions with correct download URLs
  # - Filtered commit history excluding automated version updates
  # - Professional formatting with requirements and feature descriptions
  #
  # DEPENDENCIES: validate-and-version, version-sync-and-tag
  # ==========================================================================
  create-release-assets:
    runs-on: ubuntu-latest
    needs: [validate-and-version, version-sync-and-tag]
    steps:
      # ----------------------------------------------------------------------
      # STEP: Repository Checkout for Asset Generation
      # Retrieves repository contents for creating distribution archives.
      # Full git history supports release notes generation.
      # ----------------------------------------------------------------------
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------------------
      # STEP: Professional Release Archive Creation
      # Generates tar.gz and zip archives with proper directory structure.
      # Excludes development files while maintaining distribution integrity.
      # ----------------------------------------------------------------------
      - name: üì¶ Create Release Archives
        run: |
          mkdir -p release
          
          tar -czf "release/keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='release' \
            --transform "s|^|keegees-${{ needs.validate-and-version.outputs.version }}/|" \
            .
          
          zip -r "release/keegees-${{ needs.validate-and-version.outputs.version }}.zip" \
            . \
            -x '.git/*' '.github/*' 'release/*'

      # ----------------------------------------------------------------------
      # STEP: Dynamic Release Notes Generation
      # Creates comprehensive release documentation with installation
      # instructions, change logs, and version-appropriate warnings.
      # ----------------------------------------------------------------------
      - name: üìù Generate Release Notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 --exclude="${{ needs.validate-and-version.outputs.tag }}" 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --no-merges | grep -v "üîÑ Sync version" || true)
          else
            COMMITS=$(git log --oneline --no-merges | grep -v "üîÑ Sync version" || true)
          fi
          
          NEW_VERSION="${{ needs.validate-and-version.outputs.version }}"
          MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
          if [ "$MAJOR" = "0" ]; then
            EARLY_WARNING="**‚ö†Ô∏è Early Release Notice**: This is a pre-1.0 release. Always use \`--dry-run\` before making changes to your system keybindings."
          else
            EARLY_WARNING="**‚úÖ Stable Release**: Ready for production use."
          fi
          
          cat << EOF > release_notes.md
          ## üöÄ keegees ${{ needs.validate-and-version.outputs.tag }}
          
          **Professional GNOME keybinding management tool**
          
          ### üìã What's Included
          - \`keegees.sh\` - Main executable script (1889+ lines)
          - \`install.sh\` - POSIX-compliant installation script  
          - Complete documentation and examples
          
          ### ‚ö° Quick Install
          \`\`\`bash
          wget https://github.com/nutthead/keegees/releases/download/${{ needs.validate-and-version.outputs.tag }}/keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz
          tar -xzf keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz
          cd keegees-${{ needs.validate-and-version.outputs.version }}
          ./install.sh
          \`\`\`
          
          ### üîß Requirements
          - bash (script execution)
          - gsettings (GNOME integration) 
          - bc (POSIX arithmetic)
          
          ### üìà Changes in this release
          $COMMITS
          
          ---
          ${EARLY_WARNING}
          EOF

      # ----------------------------------------------------------------------
      # STEP: Artifact Upload for Inter-Job Transfer
      # Uploads generated assets and documentation for consumption by
      # the GitHub release creation job using Actions artifact system.
      # ----------------------------------------------------------------------
      - name: üì§ Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            release/
            release_notes.md

  # ==========================================================================
  # JOB 4: GITHUB RELEASE PUBLICATION
  # ==========================================================================
  # Publishes the final GitHub release with all generated assets and
  # documentation. Downloads artifacts from previous jobs and creates a
  # comprehensive release entry with professional presentation and
  # accessibility.
  #
  # RELEASE FEATURES:
  # - Automatic latest release designation
  # - Professional release naming and descriptions
  # - Multi-format asset attachment (tar.gz, zip)
  # - Generated and custom release notes integration
  # - Public accessibility for end-users
  #
  # DEPENDENCIES: All previous jobs (validate-and-version, 
  #               version-sync-and-tag, create-release-assets)
  # ==========================================================================
  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-and-version, version-sync-and-tag, create-release-assets]
    steps:
      # ----------------------------------------------------------------------
      # STEP: Release Asset Retrieval
      # Downloads artifacts generated by previous jobs including archives
      # and release notes for GitHub release publication.
      # ----------------------------------------------------------------------
      - name: üì• Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      # ----------------------------------------------------------------------
      # STEP: GitHub Release Publication
      # Creates public GitHub release with professional presentation,
      # asset attachments, and comprehensive documentation.
      # ----------------------------------------------------------------------
      - name: üéâ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-and-version.outputs.tag }}
          name: "keegees ${{ needs.validate-and-version.outputs.tag }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          files: |
            release/keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz
            release/keegees-${{ needs.validate-and-version.outputs.version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------------------
      # STEP: Release Completion Summary
      # Outputs final release information including URLs and asset details
      # for verification and user communication.
      # ----------------------------------------------------------------------
      - name: ‚úÖ Release Summary
        run: |
          echo "üéâ Successfully created release: ${{ needs.validate-and-version.outputs.tag }}"
          echo "üì¶ Release assets:"
          echo "  - keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz"
          echo "  - keegees-${{ needs.validate-and-version.outputs.version }}.zip"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-and-version.outputs.tag }}"
