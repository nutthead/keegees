name: 🏷️ Auto Tag and Release

# Triggers on push to master branch (fully automated)
on:
  push:
    branches: [ master ]
  workflow_dispatch: # Manual trigger option

# Required permissions for tagging and releasing
permissions:
  contents: write
  packages: write

jobs:
  # Job 1: Validate and Calculate Version
  validate-and-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_next_version.outputs.version }}
      tag: ${{ steps.get_next_version.outputs.tag }}
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Run ShellCheck
        run: |
          shellcheck keegees.sh
          shellcheck install.sh

      - name: 📊 Calculate Next Version
        id: get_next_version
        run: |
          # Get latest tag or default to 0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Extract version number (remove v prefix)
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version (as per requirement 1.1)
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
          
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "📊 Next version will be: v$NEXT_VERSION"

  # Job 2: Update Version References and Create Tag
  version-sync-and-tag:
    runs-on: ubuntu-latest
    needs: validate-and-version
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN || secrets.GITHUB_TOKEN }}

      - name: 🔄 Synchronize Version Across Files
        run: |
          NEW_VERSION="${{ needs.validate-and-version.outputs.version }}"
          echo "🔄 Updating version to $NEW_VERSION across all files..."
          
          # Update README.md version badge
          sed -i "s/Version-[0-9.]*/Version-$NEW_VERSION/g" README.md
          
          # Update README.md version warning text
          sed -i "s/version [0-9.]*/version $NEW_VERSION/g" README.md
          
          # Update CLI example in README.md (the "Version 1.0.0" display)
          sed -i "s/Version [0-9.]\+/Version $NEW_VERSION/g" README.md
          
          # Update keegees.sh VERSION constant
          sed -i "s/readonly VERSION=\"[0-9.]*\"/readonly VERSION=\"$NEW_VERSION\"/g" keegees.sh
          
          # Verify changes
          echo "📊 Version references updated:"
          echo "  README.md badge: $(grep -o 'Version-[0-9.]*' README.md)"
          echo "  README.md warning: $(grep -o 'version [0-9.]*' README.md)"
          echo "  keegees.sh VERSION: $(grep -o 'readonly VERSION=\"[0-9.]*\"' keegees.sh)"

      - name: 💾 Commit Version Updates
        run: |
          NEW_VERSION="${{ needs.validate-and-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add updated files
          git add README.md keegees.sh
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No version updates needed"
          else
            git commit -m "🔄 Sync version to $NEW_VERSION across all files
            
            - Update README.md version badge and references
            - Update keegees.sh VERSION constant
            - Ensure consistency across codebase
            
            [skip ci]"
          fi

      - name: 🏷️ Create and Push Tag
        run: |
          TAG="${{ needs.validate-and-version.outputs.tag }}"
          git tag -a "$TAG" -m "🤖 Automated version tag: $TAG"
          # Push commits first, then tag (commits have [skip ci] to prevent recursion)
          git push
          git push origin "$TAG"

  # Job 3: Create Release Assets
  create-release-assets:
    runs-on: ubuntu-latest
    needs: [validate-and-version, version-sync-and-tag]
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN || secrets.GITHUB_TOKEN }}

      - name: 📦 Create Release Archives
        run: |
          # Create release directory
          mkdir -p release
          
          # Create tarball
          tar -czf "release/keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='release' \
            --transform "s|^|keegees-${{ needs.validate-and-version.outputs.version }}/|" \
            .
          
          # Create zip archive
          zip -r "release/keegees-${{ needs.validate-and-version.outputs.version }}.zip" \
            . \
            -x '.git/*' '.github/*' 'release/*'

      - name: 📝 Generate Release Notes
        run: |
          # Get commits since last tag (exclude current version being created)
          LAST_TAG=$(git describe --tags --abbrev=0 --exclude="${{ needs.validate-and-version.outputs.tag }}" 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --no-merges | grep -v "🔄 Sync version" || true)
          else
            COMMITS=$(git log --oneline --no-merges | grep -v "🔄 Sync version" || true)
          fi
          
          # Set dynamic version warning based on version
          NEW_VERSION="${{ needs.validate-and-version.outputs.version }}"
          MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
          if [ "$MAJOR" = "0" ]; then
            EARLY_WARNING="**⚠️ Early Release Notice**: This is a pre-1.0 release. Always use \`--dry-run\` before making changes to your system keybindings."
          else
            EARLY_WARNING="**✅ Stable Release**: Ready for production use."
          fi
          
          # Create release notes
          cat << EOF > release_notes.md
          ## 🚀 keegees ${{ needs.validate-and-version.outputs.tag }}
          
          **Professional GNOME keybinding management tool**
          
          ### 📋 What's Included
          - \`keegees.sh\` - Main executable script (1889+ lines)
          - \`install.sh\` - POSIX-compliant installation script  
          - Complete documentation and examples
          
          ### ⚡ Quick Install
          \`\`\`bash
          # Download and extract
          wget https://github.com/nutthead/keegees/releases/download/${{ needs.validate-and-version.outputs.tag }}/keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz
          tar -xzf keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz
          cd keegees-${{ needs.validate-and-version.outputs.version }}
          ./install.sh
          \`\`\`
          
          ### 🔧 Requirements
          - bash (script execution)
          - gsettings (GNOME integration) 
          - bc (POSIX arithmetic)
          
          ### 📈 Changes in this release
          $COMMITS
          
          ---
          ${EARLY_WARNING}
          EOF

      - name: 📤 Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            release/
            release_notes.md

  # Job 4: Create GitHub Release
  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-and-version, version-sync-and-tag, create-release-assets]
    steps:
      - name: 📥 Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-and-version.outputs.tag }}
          name: "keegees ${{ needs.validate-and-version.outputs.tag }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          files: |
            release/keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz
            release/keegees-${{ needs.validate-and-version.outputs.version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Release Summary
        run: |
          echo "🎉 Successfully created release: ${{ needs.validate-and-version.outputs.tag }}"
          echo "📦 Release assets:"
          echo "  - keegees-${{ needs.validate-and-version.outputs.version }}.tar.gz"
          echo "  - keegees-${{ needs.validate-and-version.outputs.version }}.zip"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-and-version.outputs.tag }}"
